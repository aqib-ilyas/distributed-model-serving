# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import tokenizer_service_pb2 as tokenizer__service__pb2


class TokenizerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.process_text = channel.unary_unary(
                '/tokenizer_service.TokenizerService/process_text',
                request_serializer=tokenizer__service__pb2.TextInput.SerializeToString,
                response_deserializer=tokenizer__service__pb2.TokenOutput.FromString,
                )
        self.process_tokens = channel.unary_unary(
                '/tokenizer_service.TokenizerService/process_tokens',
                request_serializer=tokenizer__service__pb2.TokenInput.SerializeToString,
                response_deserializer=tokenizer__service__pb2.TextOutput.FromString,
                )
        self.health_check = channel.unary_unary(
                '/tokenizer_service.TokenizerService/health_check',
                request_serializer=tokenizer__service__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=tokenizer__service__pb2.HealthCheckResponse.FromString,
                )


class TokenizerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def process_text(self, request, context):
        """Tokenize text input
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def process_tokens(self, request, context):
        """Decode tokens to text
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def health_check(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TokenizerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'process_text': grpc.unary_unary_rpc_method_handler(
                    servicer.process_text,
                    request_deserializer=tokenizer__service__pb2.TextInput.FromString,
                    response_serializer=tokenizer__service__pb2.TokenOutput.SerializeToString,
            ),
            'process_tokens': grpc.unary_unary_rpc_method_handler(
                    servicer.process_tokens,
                    request_deserializer=tokenizer__service__pb2.TokenInput.FromString,
                    response_serializer=tokenizer__service__pb2.TextOutput.SerializeToString,
            ),
            'health_check': grpc.unary_unary_rpc_method_handler(
                    servicer.health_check,
                    request_deserializer=tokenizer__service__pb2.HealthCheckRequest.FromString,
                    response_serializer=tokenizer__service__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tokenizer_service.TokenizerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TokenizerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def process_text(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tokenizer_service.TokenizerService/process_text',
            tokenizer__service__pb2.TextInput.SerializeToString,
            tokenizer__service__pb2.TokenOutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def process_tokens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tokenizer_service.TokenizerService/process_tokens',
            tokenizer__service__pb2.TokenInput.SerializeToString,
            tokenizer__service__pb2.TextOutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def health_check(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tokenizer_service.TokenizerService/health_check',
            tokenizer__service__pb2.HealthCheckRequest.SerializeToString,
            tokenizer__service__pb2.HealthCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
